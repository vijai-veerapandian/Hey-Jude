// HeyJude CI/CD Pipeline with a Custom Docker Agent
pipeline {
    agent {
        docker {
            image 'vijaiv/hey-jude-jenkins-agent:1.3' 
            args '-v /var/run/docker.sock:/var/run/docker.sock' 
        }
    }

    // Environment variables used throughout the pipeline.
    environment {
        DOCKERHUB_USERNAME = 'vijaiv'
        DOCKER_IMAGE_NAME = "${DOCKERHUB_USERNAME}/heyjude-frontend:1.1"
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials'
        SLACK_CREDENTIALS_ID = 'slack-bot-notification'
        SONARQUBE_CREDENTIALS_ID = 'sonarqube-auth-token'
        SONARQUBE_SERVER = 'sonarqube-server'
    }

    // --- Pipeline Stages ---
    stages {
        // Stage 1: Checkout and Prepare Workspace
        stage('Checkout & Prepare') {
            steps {
                script {
                    echo "Checking out source code..."
                    checkout scm                   
                    echo "Creating reports directory..."
                    sh 'mkdir -p reports'
                    slackSend channel: '#ci-cd', color: 'good', message: "HeyJude Build Started: Checking out code...", tokenCredentialId: SLACK_CREDENTIALS_ID
                }
            }
        }

        // Stage 2: Scan for vulnerable dependencies.
        stage('Dependency Check') {
            steps {
                script {
                    echo "Running OWASP Dependency-Check..."
                    sh '/opt/dependency-check/bin/dependency-check.sh --scan . --format HTML --out reports/'
                    slackSend channel: '#ci-cd', color: 'good', message: "HeyJude Build: Dependency Check PASSED.", tokenCredentialId: SLACK_CREDENTIALS_ID
                }
            }
        }

        // Stage 3: Static Application Security Testing (SAST).
        stage('SAST Scan') {
            steps {
                script {
                    echo "Running SAST scan with Bandit..."
                    sh 'bandit -r . -f html -o reports/bandit-report.html'
                    slackSend channel: '#ci-cd', color: 'good', message: "HeyJude Build: SAST Scan PASSED.", tokenCredentialId: SLACK_CREDENTIALS_ID
                }
            }
        }
        
        // Stage 4: SonarQube Code Quality & Security Analysis
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    sh 'sonar-scanner'
                }
            }
            post {
                success {
                    script {
                        timeout(time: 1, unit: 'HOURS') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to SonarQube Quality Gate failure: ${qg.status}"
                            }
                        }
                        slackSend channel: '#ci-cd', color: 'good', message: "HeyJude Build: SonarQube Quality Gate PASSED.", tokenCredentialId: SLACK_CREDENTIALS_ID
                    }
                }
            }
        }

        // Stage 5: Build Docker image.
        stage('Docker Build') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                    sh "docker build -t ${DOCKER_IMAGE_NAME} -f Dockerfile ."
                    slackSend channel: '#ci-cd', color: 'good', message: "HeyJude Build: Docker Image built successfully.", tokenCredentialId: SLACK_CREDENTIALS_ID
                }
            }
        }
        
        // Stage 6: Trivy Container Scan
        stage('Trivy Scan') {
            steps {
                script {
                    echo "Running Trivy scan on Docker image..."
                    sh "trivy image --format template --template '@trivy-templates/html.tpl' -o reports/trivy-report.html ${DOCKER_IMAGE_NAME}:latest"
                    slackSend channel: '#ci-cd', color: 'good', message: "HeyJude Build: Trivy Scan PASSED.", tokenCredentialId: SLACK_CREDENTIALS_ID
                }
            }
        }

        // Stage 7: Push Docker image to Docker Hub.
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        
                        echo "Pushing image ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} to Docker Hub..."
                        sh "docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                        sh "docker push ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"

                        echo "Pushing image ${DOCKER_IMAGE_NAME}:latest to Docker Hub..."
                        sh "docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_IMAGE_NAME}:latest"
                        sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                    }
                }
                slackSend channel: '#ci-cd', color: 'good', message: "HeyJude Build: Image pushed to Docker Hub.", tokenCredentialId: SLACK_CREDENTIALS_ID
            }
        }
    }

    // --- Post-Build Actions ---
    post {
        always {
            script {
                echo "Archiving reports..."
                archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
            }
        }
        success {
            slackSend channel: '#ci-cd', color: 'good', message: "SUCCESS: HeyJude pipeline finished successfully. Build #${env.BUILD_NUMBER}. Reports are available.", tokenCredentialId: SLACK_CREDENTIALS_ID
        }
        failure {
            slackSend channel: '#ci-cd', color: 'danger', message: "FAILURE: HeyJude pipeline failed at build #${env.BUILD_NUMBER}. Check logs and reports.", tokenCredentialId: SLACK_CREDENTIALS_ID
        }
    }
}
